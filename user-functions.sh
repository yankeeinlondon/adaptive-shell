#!/usr/bin/env bash

if [ -z "${ADAPTIVE_SHELL}" ] || [[ "${ADAPTIVE_SHELL}" == "" ]]; then
    UTILS="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    if [[ "${UTILS}" == *"/utils" ]];then
        ROOT="${UTILS%"/utils"}"
    else
        ROOT="$UTILS"
    fi
else
    ROOT="${ADAPTIVE_SHELL}"
    UTILS="${ROOT}/utils"
fi


# use "dust" over base "du" if available
function du() {
    setup_colors
    if has_command "dust"; then
        dust -X ".git" -X "node_modules" "$@"
        log ""
        log "${DIM:-}- excluded ${BLUE}.git${RESET}${DIM} and ${BLUE}node_modules${RESET}${DIM} directory from results${RESET:-}"
        log "${DIM}- use ${GREEN}${BOLD}dust${RESET}${DIM} to not exclude${RESET}"
    else
        if [ -z "$*" ]; then
            $(which du) "."
        else
            $(which du) "$*"
        fi
    fi
    remove_colors  
}
# h <filter>
#
# history convenience utility
function h () {
    setup_colors

    local -r filter_by="${1:-}"
    local numeric_re='^[0-9]+$'

    if [[ ${filter_by} =~ ${numeric_re} ]]; then
        log "${BOLD}History${RESET} (${ITALIC}last ${filter_by}${RESET}):\n"
        if is_zsh; then
            builtin fc -l -- "-${filter_by}"
        elif is_bash; then
            builtin history "${filter_by}"
        else
            history "${filter_by}"
        fi
    elif [[ -z ${filter_by} ]]; then
        log "${BOLD}History${RESET} (${ITALIC}all${RESET}):\n"
        if is_zsh; then
            builtin fc -l 1
        elif is_bash; then
            builtin history
        else
            history
        fi
    else
        log "${BOLD}History${RESET} (${ITALIC}filtered by '${filter_by}'${RESET}):\n"
        local -a history_cmd
        if is_zsh; then
            history_cmd=(builtin fc -l 1)
        elif is_bash; then
            history_cmd=(builtin history)
        else
            history_cmd=(history)
        fi
        if has_command "rg"; then
            "${history_cmd[@]}" | rg -- "${filter_by}"
        else
            "${history_cmd[@]}" | command grep -- "${filter_by}"
        fi
    fi

    remove_colors
}

function initialize() {
    bash "${ROOT}/programs/initialize.sh"
}


function vitesse() {
  if [ -z "$1" ]; then
    log "Syntax: ${BOLD}vitesse${NO_BOLD} ${ITALIC}\${1}${NO_ITALIC}, ${DIM}where ${NO_DIM}${ITALIC}\${1}${NO_ITALIC} ${DIM}indicates the directory to install to  ${NO_DIM}\n"
    return
  fi

  npx degit antfu/vitesse "$1" --force
}


function vitesse_ext() {
  if [ -z "$1" ]; then
    log "Syntax: ${BOLD}vitesse-ext${NO_BOLD} ${ITALIC}\${1}${NO_ITALIC}, ${DIM}where ${NO_DIM}${ITALIC}\${1}${NO_ITALIC} ${DIM}indicates the directory to install to  ${NO_DIM}\n"
    return
  fi

  npx degit antfu/vitesse-webext "$1" --force
}


function gitignore() {
  if [ ! -f "./.gitignore" ]; then
    log "- creating ${BLUE}.gitignore${RESET} file"
    log ""
    cat <<'EOF' > "./.gitignore"
# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
**/trace/*.json
# Runtime data
*.pid
*.seed
*.pid.lock
# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov
# Coverage directory used by tools like istanbul
coverage
# nyc test coverage
.nyc_output
# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt
# Bower dependency directory (https://bower.io/)
bower_components
# node-waf configuration
.lock-wscript
# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release
# Dependency directories
node_modules/
jspm_packages/
# Optional npm cache directory
.npm
# Optional eslint cache
.eslintcache
# Optional REPL history
.node_repl_history
# Output of 'npm pack'
*.tgz
# Yarn Integrity file
.yarn-integrity
# dotenv environment variables file
.env
# next.js build output
.next
# OS X temporary files
.DS_Store
# Transpiled Destinations
**/dist/
**/.presite
frontend/.vite-ssg-dist/**
/functions
# for simple TODOs
/todo.md

# Local Netlify folder
.netlify

.tsbuildinfo
trace/*
.trace/*
EOF
  else
    log "- the ${BLUE}.gitignore${RESET} file already exists, ${ITALIC}skipping${RESET}"
  fi
}



# unset login_message

function net() {
    local -r file="${REPORTS}/sys.sh"

    bash "${file}" "net"
}

function sys() {
    local -r file="${REPORTS}/sys.sh"

    bash "${file}" "sys"
}

function track() {
    local -r file="${ROOT}/track.sh"
    local -ra params=( "$@" )

    bash "${file}" "${params[@]}"
}


# about()
#
# information about aliases, functions, binary
# paths, etc.
function about() {
    local -r file="${REPORTS}/about"

    bash "${file}" "report_about"
}

if has_command "yazi"; then
    function y() {
        export EDITOR="nvim"
        local -r tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
        yazi "$@" --cwd-file="$tmp"
        if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
            builtin cd -- "$cwd" || exit 1
        fi
        rm -f -- "$tmp"
    }
else
    function y() {
        log ""
        log "the ${BOLD}${BLUE}Yazi${RESET} CLI file explorer is not installed"
        log "> https://yazi-rs.github.io/docs/installation"
        log ""
    }
fi
